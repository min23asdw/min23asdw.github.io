{"version":3,"file":"static/js/375.d163fb63.chunk.js","mappings":"+LAiTA,QA7SA,WACE,MAgRMA,EAAY,CAhRT,uyEA2FA,ijCAsLHC,EAAY,CA7IT,0sEA0FA,i0CAoDT,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACPJ,EAAAA,EAAAA,MAAA,OAAKK,MAAO,CAAEC,QAAS,MAAOJ,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJC,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQC,cAAe,OAAQN,SACnDO,MAAMC,KAAKZ,GAAW,CAACa,EAAGC,KACzBT,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEQ,MAAO,OAAQX,UAC3BC,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAASC,KAAMJ,GAATC,UAKtBT,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0CACJC,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQC,cAAe,OAAQN,SACnDO,MAAMC,KAAKX,GAAW,CAACY,EAAGC,KACzBT,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEQ,MAAO,OAAQX,UAC3BC,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAASC,KAAMJ,GAATC,cAO9B,C,wDCzSA,MA8CA,EA9C4CI,IAAe,IAAd,KAAED,GAAMC,EACnD,MAAOC,EAAQC,IAAWC,EAAAA,EAAAA,WAAkB,GAS5C,OACEhB,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,OACEK,MAAO,CACLE,QAAS,OACTC,cAAe,MACfY,WAAY,SACZC,eAAgB,gBAChBC,SAAU,WACVC,gBAAiB,UACjBjB,QAAS,MACTkB,aAAc,MACdC,OAAQ,QACRvB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEqB,WAAY,WAAYC,SAAU,cAAezB,UAC7DC,EAAAA,EAAAA,KAAA,QAAAD,SAAOa,OAETZ,EAAAA,EAAAA,KAAA,UACEyB,QA3BgBC,KACtBC,UAAUC,UAAUC,UAAUjB,GAC9BG,GAAQ,GACRe,YAAW,KACTf,GAAQ,EAAM,GACb,IAAK,EAuBFb,MAAO,CACLkB,gBAAiB,QACjBW,MAAO,OACPC,OAAQ,OACRX,aAAc,MACdlB,QAAS,MACT8B,OAAQ,WACRlC,SAEDe,EAAS,SAAW,aAGrB,C","sources":["component/ReactInlineProp.tsx","sections/CodeBlock.tsx"],"sourcesContent":["import React from \"react\";\nimport CodeBlock from \"../sections/CodeBlock\";\nimport Navbar from \"./Navbar\";\n\nfunction INLINE() {\n  const c_0 = `\"use client\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport file from \"./data.json\";\nimport TodoCard from \"./tocard\";\n\nexport interface Item {\n  name: string;\n  id: number;\n  status: \"todo\" | \"doing\" | \"done\";\n}\n\nexport default function Todo() {\n  const [items, setItems] = useState<Item[]>([]);\n\n  useEffect(() => {\n    setItems(file.data.map((item) => ({ ...item, status: \"todo\" })));\n  }, []);\n\n  useEffect(() => {\n    console.log(items);\n  }, [items]);\n\n  const updateStatus = useCallback(\n    (item: Item, status: Item[\"status\"]) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, status } : i))\n      );\n    },\n    [items]\n  );\n\n  const updateItem = useCallback(\n    (item: Item, name: string) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, name } : i))\n      );\n    },\n    [items]\n  );\n\n  const filteredItems = useCallback(\n    (status: Item[\"status\"]) => items.filter((item) => item.status === status),\n    [items]\n  );\n\n  return (\n    <div className=\"min-h-screen flex flex-row justify-center gap-3 m-3\">\n      <div>\n        todo\n        <div className=\"flex flex-col gap-3 w-80\">\n          {filteredItems(\"todo\").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateItem={updateItem}\n              next={() => updateStatus(item, \"doing\")}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        doing\n        <div className=\"flex flex-col gap-3 w-80\">\n          {filteredItems(\"doing\").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateItem={updateItem}\n              back={() => updateStatus(item, \"todo\")}\n              next={() => updateStatus(item, \"done\")}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        done\n        <div className=\"flex flex-col gap-3 w-80\">\n          {filteredItems(\"done\").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateItem={updateItem}\n              back={() => updateStatus(item, \"doing\")}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}`;\n\n  const c_1 = `import { useCallback, useState } from \"react\";\nimport { Item } from \"./page\";\n\ninterface CardProps {\n  item: Item;\n  updateItem: (item: Item, name: string) => void;\n  next?: () => void;\n  back?: () => void;\n}\n\nexport default function TodoCard(props: CardProps) {\n  const { item, next, back, updateItem } = props;\n\n  const [newName, setNewName] = useState(\"\");\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNameSubmit = () => {\n    if (newName.trim() !== \"\") {\n      updateItem(item, newName);\n      setNewName(\"\");\n    }\n  };\n  return (\n    <div className=\"bg-slate-300 h-12 flex flex-row justify-around items-center\">\n      {back && <button onClick={back}>{\"<\"}</button>}\n      <div>\n        <input\n          type=\"text\"\n          value={newName}\n          onChange={handleNameChange}\n          onBlur={handleNameSubmit}\n        />\n        {item.name} {item.status}\n      </div>\n      {next && <button onClick={next}>{\">\"}</button>}\n    </div>\n  );\n}`;\n\n  const d_0 = `\"use client\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport file from \"./data.json\";\nimport TodoCard from \"./tocard\";\n\nexport interface Item {\n  name: string;\n  id: number;\n  status: \"todo\" | \"doing\" | \"done\";\n}\n\nexport default function Todo() {\n  const [items, setItems] = useState<Item[]>([]);\n\n  useEffect(() => {\n    setItems(file.data.map((item) => ({ ...item, status: \"todo\" })));\n  }, []);\n\n  useEffect(() => {\n    console.log(items);\n  }, [items]);\n\n  const updateStatus = useCallback(\n    (item: Item, status: Item[\"status\"]) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, status } : i))\n      );\n    },\n    [items]\n  );\n\n  const updateItem = useCallback(\n    (item: Item, name: string) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, name } : i))\n      );\n    },\n    [items]\n  );\n\n  const filteredItems = useCallback(\n    (status: Item[\"status\"]) => items.filter((item) => item.status === status),\n    [items]\n  );\n\n  return (\n    <div className=\"min-h-screen flex flex-row justify-center gap-3 m-3\">\n      <div>\n        todo\n        <div className=\"flex flex-col gap-3 w-80\">\n          {filteredItems(\"todo\").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateStatus={updateStatus}\n              updateItem={updateItem}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        doing\n        <div className=\"flex flex-col gap-3 w-80\">\n          {filteredItems(\"doing\").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateStatus={updateStatus}\n              updateItem={updateItem}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        done\n        <div className=\"flex flex-col gap-3 w-80\">\n          {filteredItems(\"done\").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateStatus={updateStatus}\n              updateItem={updateItem}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}`;\n\n  const d_1 = `import { useState } from \"react\";\nimport { Item } from \"./page\";\n\ninterface CardProps {\n  item: Item;\n  updateStatus: (item: Item, status: Item[\"status\"]) => void;\n  updateItem: (item: Item, name: string) => void;\n}\n\nexport default function TodoCard(props: CardProps) {\n  const { item, updateStatus, updateItem } = props;\n  const [newName, setNewName] = useState(\"\");\n\n  const handleNext = () => {\n    updateStatus(item, item.status === \"todo\" ? \"doing\" : \"done\");\n  };\n\n  const handleBack = () => {\n    updateStatus(item, item.status === \"done\" ? \"doing\" : \"todo\");\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNameSubmit = () => {\n    if (newName.trim() !== \"\") {\n      updateItem(item, newName);\n      setNewName(\"\");\n    }\n  };\n\n  return (\n    <div className=\"bg-slate-300 h-12 flex flex-row justify-around items-center\">\n      {item.status !== \"todo\" && <button onClick={handleBack}>{\"<\"}</button>}\n\n      <div>\n        <input\n          type=\"text\"\n          value={newName}\n          onChange={handleNameChange}\n          onBlur={handleNameSubmit}\n        />\n        {item.name} {item.status}\n      </div>\n      {item.status !== \"done\" && <button onClick={handleNext}>{\">\"}</button>}\n    </div>\n  );\n}`;\n\n  const code_ver1 = [c_0, c_1];\n  const code_ver2 = [d_0, d_1];\n  return (\n    <>\n      <Navbar />\n      <div style={{ padding: \"5%\" }}>\n        <h1>Version 1 Inline function</h1>\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          {Array.from(code_ver1, (v, i) => (\n            <div style={{ width: \"50%\" }}>\n              <CodeBlock key={i} code={v} />\n            </div>\n          ))}\n        </div>\n\n        <h1>Version 2 Passing existing functions</h1>\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          {Array.from(code_ver2, (v, i) => (\n            <div style={{ width: \"50%\" }}>\n              <CodeBlock key={i} code={v} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default INLINE;\n","import React, { useState } from \"react\";\n\ninterface CodeBlockProps {\n  code: string;\n}\n\nconst CodeBlock: React.FC<CodeBlockProps> = ({ code }) => {\n  const [isCopy, setCopy] = useState<boolean>(false);\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(code);\n    setCopy(true);\n    setTimeout(() => {\n      setCopy(false);\n    }, 1000);\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          position: \"relative\",\n          backgroundColor: \"#f5f5f5\",\n          padding: \"8px\",\n          borderRadius: \"8px\",\n          margin: \"20px\",\n        }}\n      >\n        <pre style={{ whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\n          <code>{code}</code>\n        </pre>\n        <button\n          onClick={copyToClipboard}\n          style={{\n            backgroundColor: \"white\",\n            color: \"gray\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            padding: \"8px\",\n            cursor: \"pointer\",\n          }}\n        >\n          {isCopy ? \"Copied\" : \"Copy\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeBlock;\n"],"names":["code_ver1","code_ver2","_jsxs","_Fragment","children","_jsx","Navbar","style","padding","display","flexDirection","Array","from","v","i","width","CodeBlock","code","_ref","isCopy","setCopy","useState","alignItems","justifyContent","position","backgroundColor","borderRadius","margin","whiteSpace","wordWrap","onClick","copyToClipboard","navigator","clipboard","writeText","setTimeout","color","border","cursor"],"sourceRoot":""}