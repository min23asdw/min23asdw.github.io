{"version":3,"file":"static/js/835.8f4c6bf1.chunk.js","mappings":"+LAwGA,QApGA,WACE,MAoFMA,EAAO,CApFJ,g7BAmDA,mnBAkCT,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACPD,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,QAAS,MAAON,SAClEO,MAAMC,KAAKX,GAAM,CAACY,EAAGC,KACpBT,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEQ,MAAO,OAAQX,UAC3BC,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAASf,KAAMY,GAATC,WAM5B,C,wDChGA,MA8CA,EA9C4CG,IAAe,IAAd,KAAEhB,GAAMgB,EACnD,MAAOC,EAAQC,IAAWC,EAAAA,EAAAA,WAAkB,GAS5C,OACEf,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,OACEK,MAAO,CACLC,QAAS,OACTC,cAAe,MACfY,WAAY,SACZC,eAAgB,gBAChBC,SAAU,WACVC,gBAAiB,UACjBd,QAAS,MACTe,aAAc,MACdC,OAAQ,QACRtB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEoB,WAAY,WAAYC,SAAU,cAAexB,UAC7DC,EAAAA,EAAAA,KAAA,QAAAD,SAAOH,OAETI,EAAAA,EAAAA,KAAA,UACEwB,QA3BgBC,KACtBC,UAAUC,UAAUC,UAAUhC,GAC9BkB,GAAQ,GACRe,YAAW,KACTf,GAAQ,EAAM,GACb,IAAK,EAuBFZ,MAAO,CACLiB,gBAAiB,QACjBW,MAAO,OACPC,OAAQ,OACRX,aAAc,MACdf,QAAS,MACT2B,OAAQ,WACRjC,SAEDc,EAAS,SAAW,aAGrB,C","sources":["component/ReactLifecycle.tsx","sections/CodeBlock.tsx"],"sourcesContent":["import React from \"react\";\nimport CodeBlock from \"../sections/CodeBlock\";\nimport Navbar from \"./Navbar\";\n\nfunction Note() {\n  const c_0 = `import React from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface AppProps {}\n\ninterface ChildProps {\n  name: string;\n}\n\ninterface ChildState {\n  name: string;\n}\n\nclass App extends React.Component<AppProps> {\n  render() {\n    return (\n      <div>\n        <Child name=\"sachin\" />\n      </div>\n    );\n  }\n}\n\nclass Child extends React.Component<ChildProps, ChildState> {\n  constructor(props: ChildProps) {\n    super(props);\n    this.state = {\n      name: \"kapil\"\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: ChildProps, prevState: ChildState) {\n    if (nextProps.name !== prevState.name) {\n      // Change in props\n      return {\n        name: nextProps.name\n      };\n    }\n    return null; // No change to state\n  }\n\n  render() {\n    return <div>My name is {this.state.name}</div>;\n  }\n}\n\nexport default App;\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n`;\n\n  const c_1 = `import React, { useState, useEffect } from 'react';\n\ninterface AppProps {}\n\ninterface ChildProps {\n  name: string;\n}\n\nconst App: React.FC<AppProps> = () => {\n  return (\n    <div>\n      <Child name=\"sachin\" />\n    </div>\n  );\n};\n\nconst Child: React.FC<ChildProps> = ({ name }) => {\n  const [currentName, setCurrentName] = useState(\"kapil\");\n\n  useEffect(() => {\n    if (name !== currentName) {\n      setCurrentName(name);\n    }\n  }, [name, currentName]);\n\n  return <div>My name is {currentName}</div>;\n};\n\nexport default App;\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n`;\n\n  const code = [c_0, c_1];\n  return (\n    <>\n      <Navbar />\n      <div style={{ display: \"flex\", flexDirection: \"row\", padding: \"5%\" }}>\n        {Array.from(code, (v, i) => (\n          <div style={{ width: \"50%\" }}>\n            <CodeBlock key={i} code={v} />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Note;\n","import React, { useState } from \"react\";\n\ninterface CodeBlockProps {\n  code: string;\n}\n\nconst CodeBlock: React.FC<CodeBlockProps> = ({ code }) => {\n  const [isCopy, setCopy] = useState<boolean>(false);\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(code);\n    setCopy(true);\n    setTimeout(() => {\n      setCopy(false);\n    }, 1000);\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          position: \"relative\",\n          backgroundColor: \"#f5f5f5\",\n          padding: \"8px\",\n          borderRadius: \"8px\",\n          margin: \"20px\",\n        }}\n      >\n        <pre style={{ whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\n          <code>{code}</code>\n        </pre>\n        <button\n          onClick={copyToClipboard}\n          style={{\n            backgroundColor: \"white\",\n            color: \"gray\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            padding: \"8px\",\n            cursor: \"pointer\",\n          }}\n        >\n          {isCopy ? \"Copied\" : \"Copy\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeBlock;\n"],"names":["code","_jsxs","_Fragment","children","_jsx","Navbar","style","display","flexDirection","padding","Array","from","v","i","width","CodeBlock","_ref","isCopy","setCopy","useState","alignItems","justifyContent","position","backgroundColor","borderRadius","margin","whiteSpace","wordWrap","onClick","copyToClipboard","navigator","clipboard","writeText","setTimeout","color","border","cursor"],"sourceRoot":""}